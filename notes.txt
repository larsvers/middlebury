Data
----

1) we can load in the data as JSON
2) then send it through the pack layout 

* for the map and the bars we only use the nodes * without * children
* all nodes * with * children only manifest in the circle packing and can trun turn opaque or the like for the map


Chaneg notes
------------
Data clean:
 * Some entries w/o lng/lat
 * Some entries seem to be aggregates (CV Starr 36 schools in 16 countries)
 * I left all notes in there, although in a production environment I wouldve spent more time on sensible removal (no lat/lng, no students/umbrealla schools, etc.)

Interaction:
 * Makes potentially sense to allow circle sizes to encode different variables
 * The context view should be able to show binary variables too


Problem 1
---------

Problem: nodes don't transition back from circle pack to map simulation

Area: positionMap() positionPack()

Hypothesis: it seems when kicking off the second map simulation that the simulation thinks the nodes are already at their final positions. 
Seems I need to check where x y is before the first map simulation and where x y are before the second map simulation.

Fix: Before the second+ map positioning (positionMap()) set the x and y properties to the current circle packing positions.
As we don't simulate from map to circle-pack, but transition, the x and y properties (which get changed in the tick function)
remain on the last map position. Hence a newly triggered simulation just simulates them from the final map position to the 
final map position.


Feature 2
---------

Main Feature: set up lower chart

Description:
 3 different bars:
 2 linear y, categorical x
 1 no y, time x

Function structure:

 1) set up svg/g
 2) calculate scales in function(s)
 3) draw axes

 4) draw the visual function including:
 		* calculate extents
 		* set domain
 		* update axes
 		* lifecycle


Problem 2
---------

Problem: the bar chart was sorted according to the original data structure. Which was: 1 unit_long and 2 number of participants
I wanted to sort it just according to the number of participants, but sorting the data didn't achieve the results I desired.

Hypothesis: I didn't really have many hypotheses, as I assumed all it needs is to sort the data and re-bind it to the update selection

Fix: The scale domain needed to change. Why? Because it's an ordinal scale. I assume, the ordinal scale is deterministic for the values
in that the scale decides the very positioning of the values. So if you have a domain saying [a, b, c] and you map it to [0, 10, 20]
then that is gospel. Howver your data is sorted (for example [c, b, a]) a will always get mapped to 0, b to 10 and c to 20.
So what you have to do is re-map the newly sorted domain to the range.




TODO
----

x null map nodes
	if map then null nodes no fill
	if not map then null nodes fill
x decrease background inner radial 
x zoom
x subtitle
x legend
	- let the context take a little more space
	- increase the top margin
	_ build legend
x tooltip
	- listening elements: 
		* nodes
		* bars
	- tooltip showing: 
		* (see drawing)
	- build tooltip as much as possible in html and set outer div to opacity 0
	- control opacity by handler
	- show at top if mouse at bottom


* timeline
	
	1) Calulcate end positions
	   - x scale
	   - calculate
	
	2) Simulation start
	   - do I need to update x?
	
	3) Build axis
	   - Component
	   - Draw
	   - Show/Hide







* revisit blue colors
* notes
* publish


























